commit 095cae95180a7ccb75a74c7cf5b8ee453f6b81b7
Author:     Chris Feist <cfeist@redhat.com>
AuthorDate: Thu Jan 20 16:01:25 2011 -0600
Commit:     Chris Feist <cfeist@redhat.com>
CommitDate: Thu Jan 20 16:01:25 2011 -0600

    Added various options and man page

diff --git a/ccs/Makefile b/ccs/Makefile
index 5636ac2..a87f158 100644
--- a/ccs/Makefile
+++ b/ccs/Makefile
@@ -3,6 +3,7 @@
 
 VERSION=0.1.1
 SBINDIR=/usr/sbin/
+MANDIR=/usr/share/man/
 DESTDIR=
 
 tarball:
@@ -12,6 +13,8 @@ tarball:
 
 install:
 	install ccs ${DESTDIR}/${SBINDIR}/ccs
+	install -d ${DESTDIR}/${MANDIR}/man8
+	install ccs.8 ${DESTDIR}/${MANDIR}/man8
 
 test:
 	cd unit_tests; ./unittest.pl
diff --git a/ccs/ccs b/ccs/ccs
index 41a46f8..8be4154 100755
--- a/ccs/ccs
+++ b/ccs/ccs
@@ -10,6 +10,7 @@ import re
 import threading
 import time, random
 from Queue import Queue
+import getpass
 
 RICCI_PORT = 11111
 CLUSTERRNG = "cluster.rng.in"
@@ -60,27 +61,29 @@ def main(argv):
     addfenceinst = removefenceinst = False
     lsfencedev = lsfenceinst = False
     addfailoverdomain = removefailoverdomain = False
-    addfailoverdomainnode = removefailoverdomainnode = False
+    lsfailoverdomain = addfailoverdomainnode = removefailoverdomainnode = False
     addservice = addsubservice = addresource = False
     removeservice = removesubservice = removeresource = False
-    addquorumd = addheuristic = removeheuristic = False
+    listquorum = setquorumd = addheuristic = removeheuristic = False
     settotem = setrm = setcman = setfencedaemon = False
     setlogging = addlogger = removelogger = False
+    listmisc = False
     setdlm = setmulticast = False
     passwordset = False
     nodeid = votes = False
+    checkconf = False
 
     global password, debug, sync, hostname, usefile, filename, activate
 #    logging.basicConfig(level=logging.DEBUGRemove
     try:
         opts, args = getopt.getopt(argv, "dsh:p:f:", ["help","host=","getconf","status","start","stop","lsnodes",
-      "lsservices", "listdomains", "addnode=", "removenode=", "getversion","setversion=","incversion",
-      "createcluster=", "password=", "addmethod=", "removemethod=", "addfencedev=", "removefencedev=",
-      "addfenceinst=", "removefenceinst=", "lsfencedev", "lsfenceinst=", "sync", "addfailoverdomain=",
-      "removefailoverdomain=", "addservice=", "removeservice=", "addsubservice=", "removesubservice=", "addresource=",
-      "removeresource=", "addquorumd","addheuristic","settotem", "setrm", "setcman", "setfencedaemon",
-      "setlogging", "addlogger","removelogger","setmulticast=","sync","addfailoverdomainnode=", "file=", "nodeid=",
-      "votes=", "removefailoverdomainnode=", "setdlm", "removeheuristic", "startall", "stopall", "activate", "setconf"])
+      "lsservices", "listdomains", "addnode=", "rmnode=", "getversion","setversion=","incversion",
+      "createcluster=", "password=", "addmethod=", "rmmethod=", "addfencedev=", "rmfencedev=",
+      "addfenceinst=", "rmfenceinst=", "lsfencedev", "lsfenceinst", "sync", "addfailoverdomain=",
+      "rmfailoverdomain=", "addservice=", "rmservice=", "addsubservice=", "rmsubservice=", "addresource=",
+      "rmresource=", "setquorumd","addheuristic","settotem", "setrm", "setcman", "setfencedaemon",
+      "setlogging", "addlogger","rmlogger","setmulticast=","sync","addfailoverdomainnode=", "file=", "nodeid=",
+      "votes=", "rmfailoverdomainnode=", "setdlm", "rmheuristic", "startall", "stopall", "activate", "setconf", "lsquorum", "lsfailoverdomain", "lsmisc", "checkconf"])
     except getopt.GetoptError:
         usage()
         sys.exit(2)
@@ -95,6 +98,7 @@ def main(argv):
             logging.debug("Filename = %s" % filename)
         elif opt in ("--password", "-p"): passwordset = True ; password = arg
         elif opt in ("--getconf"): getconf = True
+        elif opt in ("--checkconf"): checkconf = True
         elif opt in ("--setconf"): sendconf = True
         elif opt in ("--status"): status = True
         elif opt in ("--start"): start = True
@@ -105,7 +109,7 @@ def main(argv):
         elif opt in ("--lsservices"): listservices = True
         elif opt in ("--listdomains"): listdomains = True
         elif opt in ("--addnode"): addnode = True ; node = arg 
-        elif opt in ("--removenode"): removenode = True ; node = arg 
+        elif opt in ("--rmnode"): removenode = True ; node = arg 
         elif opt in ("--getversion"): getversion = True
         elif opt in ("--setversion"): setversion = True ; version = arg 
         elif opt in ("--incversion"): incrementversion = True
@@ -118,7 +122,7 @@ def main(argv):
             addmethod = True
             method = arg
             options = args
-        elif opt in ("--removemethod"):
+        elif opt in ("--rmmethod"):
             removemethod = True
             method = arg
             options = args
@@ -126,27 +130,30 @@ def main(argv):
             addfencedev = True
             name = arg
             options = args
-        elif opt in ("--removefencedev"): removefencedev = True; name = arg
+        elif opt in ("--rmfencedev"): removefencedev = True; name = arg
         elif opt in ("--addfenceinst"):
             addfenceinst = True
             name = arg
             options = args
-        elif opt in ("--removefenceinst"):
+        elif opt in ("--rmfenceinst"):
             removefenceinst = True
             name = arg
             options = args
         elif opt in ("--lsfencedev"): lsfencedev = True;
-        elif opt in ("--lsfenceinst"): lsfenceinst = True; instance = arg
+        elif opt in ("--lsfenceinst"): lsfenceinst = True; options = args
+        elif opt in ("--lsfailoverdomain"): lsfailoverdomain = True
         elif opt in ("--addfailoverdomain"):
             addfailoverdomain = True
             name = arg
             options = args
-        elif opt in ("--removefailoverdomain"): removefailoverdomain = True; name = arg
+        elif opt in ("--rmfailoverdomain"):
+            removefailoverdomain = True
+            name = arg
         elif opt in ("--addfailoverdomainnode"):
             addfailoverdomainnode = True
             name = arg
             options = args
-        elif opt in ("--removefailoverdomainnode"):
+        elif opt in ("--rmfailoverdomainnode"):
             removefailoverdomainnode = True
             name = arg
             options = args
@@ -154,14 +161,14 @@ def main(argv):
             addservice = True
             name = arg
             options = args
-        elif opt in ("--removeservice"):
+        elif opt in ("--rmservice"):
             removeservice = True
             name = arg
         elif opt in ("--addsubservice"):
             addsubservice = True
             name = arg
             options = args
-        elif opt in ("--removesubservice"):
+        elif opt in ("--rmsubservice"):
             removesubservice = True
             name = arg
             options = args
@@ -169,13 +176,15 @@ def main(argv):
             addresource = True
             name = arg
             options = args
-        elif opt in ("--removeresource"):
+        elif opt in ("--rmresource"):
             removeresource = True
             name = arg
             options = args
-        elif opt in ("--addquorumd"): addquorumd = True; options = args
+        elif opt in ("--lsquorumd"): listquorum = True
+        elif opt in ("--setquorumd"): setquorumd = True; options = args
         elif opt in ("--addheuristic"): addheuristic = True; options = args
-        elif opt in ("--removeheuristic"): removeheuristic = True; options = args
+        elif opt in ("--rmheuristic"): removeheuristic = True; options = args
+        elif opt in ("--lsmisc"): listmisc = True
         elif opt in ("--settotem"): settotem = True; options = args
         elif opt in ("--setrm"): setrm = True; options = args
         elif opt in ("--setcman"): setcman = True; options = args
@@ -183,7 +192,7 @@ def main(argv):
         elif opt in ("--setfencedaemon"): setfencedaemon = True; options = args
         elif opt in ("--setlogging"): setlogging = True; options = args
         elif opt in ("--addlogger"): addlogger = True; options = args
-        elif opt in ("--removelogger"): removelogger = True; options = args
+        elif opt in ("--rmlogger"): removelogger = True; options = args
         elif opt in ("--setmulticast"): setmulticast = True
         elif opt in ("--nodeid"): nodeid = arg
         elif opt in ("--votes"): votes = arg
@@ -195,6 +204,7 @@ def main(argv):
 
     if (getconf): get_cluster_conf()
     if (sendconf): send_cluster_conf()
+    if (checkconf): check_cluster_conf()
     if (status): get_cluster_status()
     if (stop): stop_node(hostname) 
     if (start): start_node(hostname)
@@ -215,8 +225,9 @@ def main(argv):
     if (removefencedev): remove_fencedev(name)
     if (addfenceinst): add_fenceinst(name, options)
     if (removefenceinst): remove_fenceinst(name, options)
-    if (lsfencedev): ls_fencedev()
-    if (lsfenceinst): ls_fenceinst(arg)
+    if (lsfencedev): list_fencedev()
+    if (lsfenceinst): list_fenceinst(options)
+    if (lsfailoverdomain): list_failoverdomain()
     if (addfailoverdomain): add_failoverdomain(name, options)
     if (removefailoverdomain): remove_failoverdomain(name)
     if (addfailoverdomainnode): add_failoverdomainnode(name, options)
@@ -227,9 +238,11 @@ def main(argv):
     if (removesubservice): remove_subservice(name, options)
     if (addresource): add_resource(name, options)
     if (removeresource): remove_resource(name, options)
-    if (addquorumd): add_quorumd(options)
+    if (listquorum): list_quorum()
+    if (setquorumd): set_quorumd(options)
     if (addheuristic): add_heuristic(options)
     if (removeheuristic): remove_heuristic(options)
+    if (listmisc): list_misc()
     if (settotem): set_totem(options)
     if (setrm): set_rm(options)
     if (setcman): set_cman(options)
@@ -243,18 +256,26 @@ def main(argv):
 
 def usage():
     print """Usage: ccs [OPTION]...
-Remotely control cluster infrastructure.
+Cluster configuration system.
 
       --help            Display this help and exit
-  -h, --host [host]     Cluster node to perform actions on
-  -f, --file [file]     File to perform actions on
+  -h, --host host       Cluster node to perform actions on
+  -f, --file file       File to perform actions on
   -p, --password        Ricci user password for node running ricci
       --getconf         Print current cluster.conf file
       --setconf         Use the file specified by '-f' to send to the host
                         specified with '-h'
+      --checkconf       If file is specified, verify that all the nodes in the
+                        file have the same cluster.conf as the file.  If a
+                        host is specified then verify that all nodes in the
+                        host's cluster.conf file have the identical
+                        cluster.conf file
+                        same cluster.conf
       --sync            Sync config file to all nodes
       --activate        Activate config on node (use this option with --sync
                         to activate config on all nodes)
+      --debug           Display debugging information to help troubleshoot
+                        connection issues with ricci
 
 Cluster Operations:
       --createcluster <cluster>
@@ -272,67 +293,76 @@ Cluster Operations:
 Node Operations:
       --lsnodes         List all nodes in the cluster
       --addnode <node>  Add node <node> to the cluster
-      --removenode <node>
+      --rmnode <node>
                         Remove a node from the cluster
       --nodeid <nodeid> Specify nodeid when adding a node
       --votes <votes>   Specify number of votes for a node
 
 Fencing Operations:
+      --lsfencedev      List all of the fence devices configured
+      --lsfenceinst [<node>]
+                        List all of the fence methods and instances on the
+                        specified node or all nodes if no node is specified
       --addmethod <method> <node>
                         Add a fence method to a specific node
-      --removemethod <method> <node>
+      --rmmethod <method> <node>
                         Remove a fence method from a specific node
       --addfencedev <device name> [fence device options]
                         Add fence device
-      --removefencedev <fence device name>
+      --rmfencedev <fence device name>
                         Remove fence device
       --addfenceinst <fence device name> <node> <method> <options>
                         Add fence instance
-      --removefenceinst <fence device name> <node> <method>
+      --rmfenceinst <fence device name> <node> <method>
                         Remove all instances of the fence device listed from
                         the given method and node
 
 Failover Domain Operations:
+      --lsfailoverdomain
+                        Lists all of the failover domains and failover domain
+                        nodes configured in the cluster
       --addfailoverdomain <name> [restricted] [ordered] [nofailback]
                         Add failover domain
-      --removefailoverdomain <name>
+      --rmfailoverdomain <name>
                         Remove failover domain
       --addfailoverdomainnode <failover domain> <node> [priority=xx]
                         Add node to given failover domain
-      --removefailoverdomainnode <failover domain> <node>
+      --rmfailoverdomainnode <failover domain> <node>
                         Remove node from failover domain
 
 Service Operations:
+      --lsservices      List currently configured services and resources in
+                        the cluster
+      --addresource <resource type> [resource options] ...
+                        Add resources to the cluster
+      --rmresource <resource type> [resource options]
+                        Remove specified resource with resource options
       --addservice <servicename> [service options] ...
                         Add service to cluster
-      --removeservice <servicename>
+      --rmservice <servicename>
                         Removes a service and all of its subservices
       --addsubservice <servicename> <subservice> [service options] ...
                         Add individual sub services, if adding services within
                         a tree, use ':' to separate elements and brackets to
                         identify subservices of the same type
                         Example: --addsubservice service_a nfs[1]:nfs[2]:nfs
-      --removesubservice <servicename> <subservice>
+      --rmsubservice <servicename> <subservice>
                         Removes a specific subservice specified by the
                         subservice, using ':' to separate elements and
                         brackets to identify between subservices of the
                         same type.
-      --addresource <resource type> [resource options] ...
-                        Add resources to the cluster
-      --removeresource <resource type> [resource options]
-                        Remove specified resource with resource options
-      --lsservices      List currently configured services and resources in
-                        the cluster
 
 Quorum Operations:
-      --addquorumd [quorumd options] ...
+      --lsquorum        List quorum options and heuristics
+      --setquorumd [quorumd options] ...
                         Add quorumd options
       --addheuristic [heuristic options] ...
                         Add heuristics to quorumd
-      --removeheuristic [heuristic options] ...
+      --rmheuristic [heuristic options] ...
                         Remove heuristic specified by heurstic options
 
 Misc Options
+      --lsmisc          List all of the misc options
       --settotem [totem options]
                         Set totem options
       --setdlm [dlm options]
@@ -350,7 +380,7 @@ Misc Options
                         Set logging options
       --addlogger [logger options]
                         Add a logger
-      --removelogger [logger options]
+      --rmlogger [logger options]
                         Remove a logger
   """
 
@@ -490,7 +520,7 @@ def list_nodes():
     xml = get_cluster_conf_xml()
     dom = minidom.parseString(xml)
     for node in dom.getElementsByTagName('clusternode'):
-        print node.getAttribute("name")
+        print node.getAttribute("name") + ": " + getNodeAttr(node, "name")
 
 def list_services():
     xml = get_cluster_conf_xml()
@@ -509,16 +539,21 @@ def print_services_map(node,level):
     for i in range(num_spaces):
         prefix = " " + prefix
 
+    nodeattr = getNodeAttr(node)
+
+    print prefix + node.tagName + ": " + nodeattr
+    for cn in node.childNodes:
+        print_services_map(cn, level + 1)
+
+def getNodeAttr(node, ignore = []):
     nodeattr = ""
     if node.attributes != None:
         length = node.attributes.length
         for i in range(length):
-            nodeattr = nodeattr + node.attributes.item(i).name + ": " + node.attributes.item(i).value + ", "
-
+            if node.attributes.item(i).name not in ignore:
+                nodeattr = nodeattr + node.attributes.item(i).name + "=" + node.attributes.item(i).value + ", "
     nodeattr = re.sub(r", $","", nodeattr)
-    print prefix + node.tagName + ": " + nodeattr
-    for cn in node.childNodes:
-        print_services_map(cn, level + 1)
+    return nodeattr
 
 def list_domains():
     xml = get_cluster_conf_xml()
@@ -620,8 +655,6 @@ def empty_cluster_conf(name="cluster"):
     top.setAttribute('config_version','1')
     top.setAttribute('name',name)
     fence_daemon = newdoc.createElement("fence_daemon")
-    fence_daemon.setAttribute('post_fail_delay','0')
-    fence_daemon.setAttribute('post_join_delay','3')
     clusternodes = newdoc.createElement("clusternodes")
     cman = newdoc.createElement("cman")
     fencedevices = newdoc.createElement("fencedevices")
@@ -825,6 +858,17 @@ def remove_fenceinst(name, options):
 
     set_cluster_conf(dom.toxml())
 
+def list_failoverdomain():
+    dom = minidom.parseString(get_cluster_conf_xml())
+    fds = dom.getElementsByTagName("failoverdomain")
+    if len(fds) == 0:
+        sys.exit(0)
+
+    for fd in fds:
+        print fd.getAttribute("name") + ": " + getNodeAttr(fd,"name")
+        for fdn in fd.getElementsByTagName("failoverdomainnode"):
+            print "  " + fdn.getAttribute("name") + ": " + getNodeAttr(fdn,"name")
+
 def add_failoverdomain(name, options):
     dom = minidom.parseString(get_cluster_conf_xml())
 
@@ -955,25 +999,62 @@ def remove_failoverdomainnode(name, options):
     sys.exit(1)
 
 
+def list_fencedev():
+    dom = minidom.parseString(get_cluster_conf_xml())
+    fds = dom.getElementsByTagName('fencedevices')
+
+    # If no fencedevice section, we don't print anything
+    if len(fds) == 0:
+        sys.exit(0)
+
+    for fd in fds[0].getElementsByTagName('fencedevice'):
+        print fd.getAttribute("name") + ": " + getNodeAttr(fd,"name")
+
+def list_fenceinst(options):
+    if len(options) == 0:
+        node = None
+    else:
+        node = options[0]
 
-def ls_fencedev():
-    rng = open(CLUSTERRNG)
-    dom = minidom.parseString(rng.read())
-    for elem in dom.getElementsByTagName("group"):
-        if elem.getAttribute("rha:fence_agent"):
-            print elem.getAttribute("rha:fence_agent")
+    dom = minidom.parseString(get_cluster_conf_xml())
 
-def ls_fenceinst(fencedev):
-    rng = open(CLUSTERRNG)
-    dom = minidom.parseString(rng.read())
-    for elem in dom.getElementsByTagName("group"):
-        if elem.getAttribute("rha:fence_agent") == fencedev:
-            for attr in elem.getElementsByTagName("attribute"):
-                attrname = attr.getAttribute("name")
-                invisible_attrs = ["verbose", "debug", "version", "help",
-                        "option", "action", "separator"]
-                if attrname not in invisible_attrs:
-                    print attr.getAttribute("name") + " - " + attr.getAttribute("rha:description")
+    nodes = dom.getElementsByTagName("clusternode")
+
+    if node != None:
+        for n in nodes:
+            if n.getAttribute("name") != node:
+                nodes.remove(n)
+                break;
+
+    for n in nodes:
+        print n.getAttribute("name")
+        for method in n.getElementsByTagName('method'):
+            print "  " + method.getAttribute('name')
+            for inst in method.getElementsByTagName('device'):
+                print "    " + inst.getAttribute("name") + ": " + getNodeAttr(inst, "name")
+    return
+
+
+# Disabling these functions until we get a better idea of how to
+# display fencing options
+#def ls_fencedev():
+#    rng = open(CLUSTERRNG)
+#    dom = minidom.parseString(rng.read())
+#    for elem in dom.getElementsByTagName("group"):
+#        if elem.getAttribute("rha:fence_agent"):
+#            print elem.getAttribute("rha:fence_agent")
+#
+#def ls_fenceinst(fencedev):
+#    rng = open(CLUSTERRNG)
+#    dom = minidom.parseString(rng.read())
+#    for elem in dom.getElementsByTagName("group"):
+#        if elem.getAttribute("rha:fence_agent") == fencedev:
+#            for attr in elem.getElementsByTagName("attribute"):
+#                attrname = attr.getAttribute("name")
+#                invisible_attrs = ["verbose", "debug", "version", "help",
+#                        "option", "action", "separator"]
+#                if attrname not in invisible_attrs:
+#                    print attr.getAttribute("name") + " - " + attr.getAttribute("rha:description")
 
 def add_service(name, options):
     dom = minidom.parseString(get_cluster_conf_xml())
@@ -1189,7 +1270,14 @@ def remove_resource(type, options):
             
     set_cluster_conf(dom.toxml())
 
-def add_quorumd(options):
+def list_quorum():
+    xml = get_cluster_conf_xml()
+    dom = minidom.parseString(xml)
+    
+    list_tag(dom,"quorumd", "Quorumd")
+    list_tag(dom, "heuristic", "  heuristic")
+
+def set_quorumd(options):
     dom = minidom.parseString(get_cluster_conf_xml())
 
     # If quorumd section exists we rewrite it, else we create a new one
@@ -1202,6 +1290,8 @@ def add_quorumd(options):
     else:
         quorumd = quorumd[0]
 
+    while(quorumd.attributes.length != 0):
+        quorumd.removeAttribute(quorumd.attributes.item(0).name)
     quorumd = set_element_attributes(quorumd, options)
 
     set_cluster_conf(dom.toxml())
@@ -1209,6 +1299,10 @@ def add_quorumd(options):
 def add_heuristic(options):
     dom = minidom.parseString(get_cluster_conf_xml())
 
+    if len(options) == 0:
+        print "You must specify at least one option when adding a heuristic."
+        sys.exit(1)
+
     # If quorumd section is present we use it, else we create an empty one
     quorumd = dom.getElementsByTagName('quorumd')
     if len(quorumd) == 0:
@@ -1247,24 +1341,41 @@ def remove_heuristic(options):
             sys.exit(1)
         heuristic_options[attr] = val
 
-    for hueristic in dom.getElementsByTagName('heuristic'):
+    heuristicMatch = False
+    for heuristic in dom.getElementsByTagName('heuristic'):
+        if options == [] and heuristic.attributes.length == 0:
+            heuristicMatch = True
+            break
         for option,val in heuristic_options.iteritems():
-            if hueristic.getAttribute(option) != val:
-                hueristicMatch = False
+            if heuristic.getAttribute(option) != val:
+                heuristicMatch = False
                 break
             else:
-                hueristicMatch = True
-        if hueristicMatch == True:
+                heuristicMatch = True
+        if heuristicMatch == True:
             break
 
-    if hueristicMatch != True:
-        print "Unable to find matching hueristic: %s, %s" % (type,options)
+    if heuristicMatch != True:
+        print "Unable to find matching heuristic: %s" % (options)
         sys.exit(1)
 
-    quorumd.removeChild(hueristic)
+    quorumd.removeChild(heuristic)
             
     set_cluster_conf(dom.toxml())
 
+def list_misc():
+    xml = get_cluster_conf_xml()
+    dom = minidom.parseString(xml)
+    
+    list_tag(dom,"totem", "Totem")
+    list_tag(dom, "dlm", "DLM")
+    list_tag(dom, "rm", "Resource Manager")
+    list_tag(dom, "cman", "CMAN")
+    list_tag(dom, "multicast", "Multicast")
+    list_tag(dom, "fencedaemon", "Fence Daemon")
+    list_tag(dom, "logging", "Logging")
+    list_tag(dom, "logger", "  logger")
+
 def set_totem(options):
     dom = minidom.parseString(get_cluster_conf_xml())
 
@@ -1457,6 +1568,16 @@ def set_multicast(arg):
 
     set_cluster_conf(dom.toxml())
 
+# Lists options for a specific tag
+def list_tag(dom, tag, prettyname):
+    elements = dom.getElementsByTagName(tag)
+
+    # If no 'tag' section, we don't print anything
+    if len(elements) == 0:
+        return
+
+    for element in elements:
+        print prettyname + ": " + getNodeAttr(element)
 
 # Sets the attributes of a specific xml element where options
 # is an array of strings containing attribute=value
@@ -1477,9 +1598,9 @@ def send_cluster_conf():
         print "Error: must specify a filename and host when using --setconf"
         sys.exit(2)
 
-# Will default to the file
+    # Will default to the file
     xml = get_cluster_conf_xml()
-# After reading file, zero out usefile and filename to send to host
+    # After reading file, zero out usefile and filename to send to host
     usefile = filename = False
     set_cluster_conf(xml, False)
 
@@ -1509,6 +1630,29 @@ def set_cluster_conf(xml, increment = True):
         else:
             log_msg (send_ricci_command("cluster", "set_cluster.conf", hostname, ("cluster.conf","xml","",xml)))
 
+def check_cluster_conf():
+    global hostname, usefile
+    xml = get_cluster_conf_xml()
+    dom = minidom.parseString(xml)
+    
+    usefile = False
+    bad_nodes = []
+    orig_hostname = hostname
+    for node in dom.getElementsByTagName("clusternode"):
+        hostname = node.getAttribute("name")
+        if hostname == orig_hostname:
+            continue
+        xml2 = get_cluster_conf_xml()
+        if xml2 != xml:
+            print "Node: %s does not match" % hostname
+            bad_nodes << hostname
+
+    hostname = orig_hostname
+    if len(bad_nodes) > 0:
+        sys.exit(1)
+    else:
+        print "All nodes in sync."
+
 def verify_authentication(dom):
     ricci =  dom.getElementsByTagName("ricci")
     if len(ricci) > 0:
@@ -1519,7 +1663,16 @@ def verify_authentication(dom):
     print "Error: no ricci tag in ricci response"
     sys.exit(1)
 
+def check_authentication(host):
+    msg = '<ricci function="authenticate" password="%s" version="1.0"/>' % password
+    res = send_to_ricci(msg, host)     
+    dom = minidom.parseString(res[1])
+    if (not verify_authentication(dom)):
+        print "Unable to authenticate with ricci node, please check password."
+        sys.exit(1)
+
 def send_ricci_command(module, command, host = None, *vars):
+    global password
     variables = ""
 
     if host == None:
@@ -1533,56 +1686,61 @@ def send_ricci_command(module, command, host = None, *vars):
 
     # If a password is set, then we authenticate
     if password != None:
-        msg = '<ricci function="authenticate" password="%s" version="1.0"/>' % password
-        res = send_to_ricci(msg, host)     
-        dom = minidom.parseString(res[1])
-        if (not verify_authentication(dom)):
-            print "Unable to authenticate with ricci node, please check password."
-            sys.exit(1)
+        check_authentication(host)
     
     msg = '<ricci function="process_batch" async="false" version="1.0"><batch><module name="%s"><request API_version="1.0"><function_call name="%s">%s</function_call></request></module></batch></ricci>' % (module,command,variables)
     res = send_to_ricci(msg, host)
     dom = minidom.parseString(res[1].replace('\t',''))
     if (not verify_authentication(dom)):
-        print "Error: Not yet authenticated with %s (try -p option)" % host
-        sys.exit(1)
+        password = getpass.getpass(host + " password: ");
+        check_authentication(host)
+        res = send_to_ricci(msg, host)
+        dom = minidom.parseString(res[1].replace('\t',''))
+        if (not verify_authentication(dom)):
+            print "Error: Not yet authenticated with %s (try -p option)" % host
+            sys.exit(1)
     xml = dom.getElementsByTagName('function_response')[0].toxml()
     return xml 
 
 def send_to_ricci(msg, host=hostname):
-    cert = os.path.expanduser("~/.ricci/cacert.pem")
-    key = os.path.expanduser("~/.ricci/privkey.pem")
-    config = os.path.expanduser("~/.ricci/cacert.config")
+    cert = os.path.expanduser("~/.ccs/cacert.pem")
+    key = os.path.expanduser("~/.ccs/privkey.pem")
+    config = os.path.expanduser("~/.ccs/cacert.config")
     s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 
     # Make sure we have a client certificate and private key
     # If not we need to autogenerate them (including creating an
     # openssl configuration file
     if (os.path.isfile(cert) == False or os.path.isfile(key) == False):
-        print "Autogenerating private key and certificate."
-        if not os.path.exists(os.path.expanduser("~/.ricci")):
-            os.mkdir(os.path.expanduser("~/.ricci"),0700);
+        log_msg("Autogenerating private key and certificate.")
+        if not os.path.exists(os.path.expanduser("~/.ccs")):
+            os.mkdir(os.path.expanduser("~/.ccs"),0700);
         f = open (config, 'w')
         f.write("""
-      [ req ]
-      distinguished_name     = req_distinguished_name
-      attributes             = req_attributes
-      prompt                 = no
-
-      [ req_distinguished_name ]
-      C                      = US
-      ST                     = State or Province
-      L                      = Locality
-      O                      = Organization Name
-      OU                     = Organizational Unit Name
-      CN                     = Common Name
-      emailAddress           = root@localhost
-
-      [ req_attributes ]
+[ req ]
+distinguished_name     = req_distinguished_name
+attributes             = req_attributes
+prompt                 = no
+
+[ req_distinguished_name ]
+C                      = US
+ST                     = State or Province
+L                      = Locality
+O                      = Organization Name
+OU                     = Organizational Unit Name
+CN                     = Common Name
+emailAddress           = root@localhost
+
+[ req_attributes ]
 """)
         f.close()
-        os.system ("/usr/bin/openssl genrsa -out %s 2048" % key)
-        os.system ("/usr/bin/openssl req -new -x509 -key %s -out %s -days 1825 -config ~/.ricci/cacert.config" % (key,cert))
+        if (debug):
+            redirect = ""
+        else:
+            redirect = " > /dev/null 2&>1"
+
+        os.system ("/usr/bin/openssl genrsa -out %s 2048 %s" % (key,redirect))
+        os.system ("/usr/bin/openssl req -new -x509 -key %s -out %s -days 1825 -config ~/.ccs/cacert.config" % (key,cert))
 
     ss = ssl.wrap_socket(s, key, cert)
     try:
diff --git a/ccs/unit_tests/addtest.conf b/ccs/unit_tests/addtest.conf
index e9db077..20010c2 100644
--- a/ccs/unit_tests/addtest.conf
+++ b/ccs/unit_tests/addtest.conf
@@ -1,5 +1,5 @@
 <cluster config_version="32" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes>
     <clusternode name="node1" nodeid="1"/>
     <clusternode name="node2" nodeid="2"/>
diff --git a/ccs/unit_tests/addtest.conf.end b/ccs/unit_tests/addtest.conf.end
index e9db077..20010c2 100644
--- a/ccs/unit_tests/addtest.conf.end
+++ b/ccs/unit_tests/addtest.conf.end
@@ -1,5 +1,5 @@
 <cluster config_version="32" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes>
     <clusternode name="node1" nodeid="1"/>
     <clusternode name="node2" nodeid="2"/>
diff --git a/ccs/unit_tests/failover.conf b/ccs/unit_tests/failover.conf
index f95653d..fc6df60 100644
--- a/ccs/unit_tests/failover.conf
+++ b/ccs/unit_tests/failover.conf
@@ -1,5 +1,5 @@
 <cluster config_version="24" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes>
     <clusternode name="node1" nodeid="1"/>
     <clusternode name="node2" nodeid="2"/>
diff --git a/ccs/unit_tests/failover.conf.end b/ccs/unit_tests/failover.conf.end
index f95653d..fc6df60 100644
--- a/ccs/unit_tests/failover.conf.end
+++ b/ccs/unit_tests/failover.conf.end
@@ -1,5 +1,5 @@
 <cluster config_version="24" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes>
     <clusternode name="node1" nodeid="1"/>
     <clusternode name="node2" nodeid="2"/>
diff --git a/ccs/unit_tests/fence.conf b/ccs/unit_tests/fence.conf
index 244b76f..7985e98 100644
--- a/ccs/unit_tests/fence.conf
+++ b/ccs/unit_tests/fence.conf
@@ -1,5 +1,5 @@
 <cluster config_version="19" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes>
     <clusternode name="node1" nodeid="1">
       <fence>
diff --git a/ccs/unit_tests/fence.conf.end b/ccs/unit_tests/fence.conf.end
index 244b76f..7985e98 100644
--- a/ccs/unit_tests/fence.conf.end
+++ b/ccs/unit_tests/fence.conf.end
@@ -1,5 +1,5 @@
 <cluster config_version="19" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes>
     <clusternode name="node1" nodeid="1">
       <fence>
diff --git a/ccs/unit_tests/lsnodes.conf b/ccs/unit_tests/lsnodes.conf
index 0acdeca..bfddad4 100644
--- a/ccs/unit_tests/lsnodes.conf
+++ b/ccs/unit_tests/lsnodes.conf
@@ -1,5 +1,5 @@
 <cluster config_version="3" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes>
     <clusternode name="node1" nodeid="1"/>
     <clusternode name="node2" nodeid="2"/>
diff --git a/ccs/unit_tests/lsnodes.conf.end b/ccs/unit_tests/lsnodes.conf.end
index 1c5b5f3..dda0b56 100644
--- a/ccs/unit_tests/lsnodes.conf.end
+++ b/ccs/unit_tests/lsnodes.conf.end
@@ -1,2 +1,2 @@
-node1
-node2
+node1: nodeid=1
+node2: nodeid=2
diff --git a/ccs/unit_tests/quorum.conf b/ccs/unit_tests/quorum.conf
index e6e0d2f..4c7785d 100644
--- a/ccs/unit_tests/quorum.conf
+++ b/ccs/unit_tests/quorum.conf
@@ -1,5 +1,5 @@
 <cluster config_version="11" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes>
     <clusternode name="node1" nodeid="1"/>
     <clusternode name="node2" nodeid="2"/>
diff --git a/ccs/unit_tests/quorum.conf.end b/ccs/unit_tests/quorum.conf.end
index e6e0d2f..4c7785d 100644
--- a/ccs/unit_tests/quorum.conf.end
+++ b/ccs/unit_tests/quorum.conf.end
@@ -1,5 +1,5 @@
 <cluster config_version="11" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes>
     <clusternode name="node1" nodeid="1"/>
     <clusternode name="node2" nodeid="2"/>
diff --git a/ccs/unit_tests/service.conf b/ccs/unit_tests/service.conf
index 19cc088..c1b099b 100644
--- a/ccs/unit_tests/service.conf
+++ b/ccs/unit_tests/service.conf
@@ -1,5 +1,5 @@
 <cluster config_version="36" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes>
     <clusternode name="node1" nodeid="1"/>
     <clusternode name="node2" nodeid="2"/>
diff --git a/ccs/unit_tests/service.conf.end b/ccs/unit_tests/service.conf.end
index 19cc088..c1b099b 100644
--- a/ccs/unit_tests/service.conf.end
+++ b/ccs/unit_tests/service.conf.end
@@ -1,5 +1,5 @@
 <cluster config_version="36" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes>
     <clusternode name="node1" nodeid="1"/>
     <clusternode name="node2" nodeid="2"/>
diff --git a/ccs/unit_tests/unittest.pl b/ccs/unit_tests/unittest.pl
index decffe3..e84d425 100755
--- a/ccs/unit_tests/unittest.pl
+++ b/ccs/unit_tests/unittest.pl
@@ -69,8 +69,8 @@ sub misc_test {
   test ("$CCS -f $t --addlogger mylog=4",0);
   test ("$CCS -f $t --addlogger mylog=5",0);
 
-  test ("$CCS -f $t --removelogger mylog=4",0);
-  test ("$CCS -f $t --removelogger mylog=4",1);
+  test ("$CCS -f $t --rmlogger mylog=4",0);
+  test ("$CCS -f $t --rmlogger mylog=4",1);
 
   $retval = diff ($t,"$t.end");
   #`rm $t`;
@@ -83,15 +83,15 @@ sub quorum_test {
   test ("$CCS -f $t --addnode node1",0);
   test ("$CCS -f $t --addnode node2",0);
   test ("$CCS -f $t --addheuristic options=TTT",0);
-  test ("$CCS -f $t --addquorumd options=XXX",0);
+  test ("$CCS -f $t --setquorumd options=XXX",0);
   test ("$CCS -f $t --addheuristic options=YYY",0);
-  test ("$CCS -f $t --addquorumd options=AAA",0);
+  test ("$CCS -f $t --setquorumd options=AAA",0);
   test ("$CCS -f $t --addheuristic options=BBB",0);
   test ("$CCS -f $t --addheuristic options=CCC",0);
 
-  test ("$CCS -f $t --removeheuristic options=TTT",0);
-  test ("$CCS -f $t --removeheuristic options=TTT",1);
-  test ("$CCS -f $t --removeheuristic options=BBB",0);
+  test ("$CCS -f $t --rmheuristic options=TTT",0);
+  test ("$CCS -f $t --rmheuristic options=TTT",1);
+  test ("$CCS -f $t --rmheuristic options=BBB",0);
 
   $retval = diff ($t,"$t.end");
   #`rm $t`;
@@ -108,7 +108,7 @@ sub service_test {
   test ("$CCS -f $t --addservice service2 a=b c=d",1);
   test ("$CCS -f $t --addservice service2",1);
   test ("$CCS -f $t --addservice service3 a=b c=d",0);
-  test ("$CCS -f $t --removeservice service3",0);
+  test ("$CCS -f $t --rmservice service3",0);
   test ("$CCS -f $t --addsubservice service1 nfs a=b c=1",0);
   test ("$CCS -f $t --addsubservice service2 nfs a=b c=2",0);
   test ("$CCS -f $t --addsubservice service2 nfs:nfs a=b c=3",0);
@@ -129,9 +129,9 @@ sub service_test {
   test ("$CCS -f $t --addsubservice service2 nfs[1]:nfs a=b c=16",0);
   test ("$CCS -f $t --addsubservice service2 nfs[2]:nfs a=b c=17",0);
 
-  test ("$CCS -f $t --removesubservice service2 nfs:nfs[1]:nfs[1]:nfs[1]",0);
-  test ("$CCS -f $t --removesubservice service2 nfs[2]:nfs",0);
-  test ("$CCS -f $t --removesubservice service2 nfs[2]:nfs",1);
+  test ("$CCS -f $t --rmsubservice service2 nfs:nfs[1]:nfs[1]:nfs[1]",0);
+  test ("$CCS -f $t --rmsubservice service2 nfs[2]:nfs",0);
+  test ("$CCS -f $t --rmsubservice service2 nfs[2]:nfs",1);
 
   test ("$CCS -f $t --addresource restype1 a=b b=1",0);
   test ("$CCS -f $t --addresource restype2 a=b b=2",0);
@@ -140,8 +140,8 @@ sub service_test {
   test ("$CCS -f $t --addresource restype3 a=b b=5",0);
   test ("$CCS -f $t --addresource restype3 a=b b=6",0);
 
-  test ("$CCS -f $t --removeresource restype3 a=b b=3",0);
-  test ("$CCS -f $t --removeresource restype3 a=b b=5",0);
+  test ("$CCS -f $t --rmresource restype3 a=b b=3",0);
+  test ("$CCS -f $t --rmresource restype3 a=b b=5",0);
 
 
   $retval = diff ($t,"$t.end");
@@ -166,8 +166,8 @@ sub failover_test {
   test ("$CCS -f $t --addfailoverdomain fd8 nofailback",0);
   test ("$CCS -f $t --addfailoverdomain fd9 restricted",0);
   test ("$CCS -f $t --addfailoverdomain fd9",1);
-  test ("$CCS -f $t --removefailoverdomain fd8",0);
-  test ("$CCS -f $t --removefailoverdomain fd8",1);
+  test ("$CCS -f $t --rmfailoverdomain fd8",0);
+  test ("$CCS -f $t --rmfailoverdomain fd8",1);
   test ("$CCS -f $t --addfailoverdomainnode fd1 node1",0);
   test ("$CCS -f $t --addfailoverdomainnode fd1 node1",0);
   test ("$CCS -f $t --addfailoverdomainnode fd2 node1",0);
@@ -180,9 +180,9 @@ sub failover_test {
   test ("$CCS -f $t --addfailoverdomainnode fd4 node1 1",0);
   test ("$CCS -f $t --addfailoverdomainnode fd5 node2 50",0);
   test ("$CCS -f $t --addfailoverdomainnode fd5 node1 1",0);
-  test ("$CCS -f $t --removefailoverdomainnode fd5 node1",0);
-  test ("$CCS -f $t --removefailoverdomainnode fd5 node1",1);
-  test ("$CCS -f $t --removefailoverdomainnode fd5 node2",0);
+  test ("$CCS -f $t --rmfailoverdomainnode fd5 node1",0);
+  test ("$CCS -f $t --rmfailoverdomainnode fd5 node1",1);
+  test ("$CCS -f $t --rmfailoverdomainnode fd5 node2",0);
 
   $retval = diff ($t,"$t.end");
   #`rm $t`;
@@ -202,21 +202,21 @@ sub fence_test {
   test ("$CCS -f $t --addmethod node2method2 node2",0);
   test ("$CCS -f $t --addmethod node1method3 node1",0);
   test ("$CCS -f $t --addmethod node2method3 node2",0);
-  test ("$CCS -f $t --removemethod node1method3 node1",0);
-  test ("$CCS -f $t --removemethod node1methodX node1",1);
+  test ("$CCS -f $t --rmmethod node1method3 node1",0);
+  test ("$CCS -f $t --rmmethod node1methodX node1",1);
   test ("$CCS -f $t --addfencedev fence_ilo agent=fence_ilo optiona=x optionb=y",0);
   test ("$CCS -f $t --addfencedev fence_apc agent=fence_apc optiona=x optionb=y",0);
   test ("$CCS -f $t --addfencedev fence_apc2 agent=fence_apc optiona=x optionb=y",0);
   test ("$CCS -f $t --addfencedev fence_apcX agent=fence_apc optiona=x optionb=y",0);
-  test ("$CCS -f $t --removefencedev fence_apcX",0);
-  test ("$CCS -f $t --removefencedev fence_apcX",1);
+  test ("$CCS -f $t --rmfencedev fence_apcX",0);
+  test ("$CCS -f $t --rmfencedev fence_apcX",1);
   test ("$CCS -f $t --addfenceinst fence_apcX node1 node1method",1);
   test ("$CCS -f $t --addfenceinst fence_ilo node1 node1method port=5",0);
   test ("$CCS -f $t --addfenceinst fence_ilo node1 node1method port=6",0);
   test ("$CCS -f $t --addfenceinst fence_apc node1 node1method port=1",0);
   test ("$CCS -f $t --addfenceinst fence_apc node1 badmethod port=1",1);
-  test ("$CCS -f $t --removefenceinst fence_ilo node1 node1method",0);
-  test ("$CCS -f $t --removefenceinst fence_ilo node1 node1method",1);
+  test ("$CCS -f $t --rmfenceinst fence_ilo node1 node1method",0);
+  test ("$CCS -f $t --rmfenceinst fence_ilo node1 node1method",1);
   $retval = diff ($t,"$t.end");
   #`rm $t`;
   return $retval;
@@ -262,17 +262,17 @@ sub add_remove_test {
   test ("$CCS -f $t --addnode node9",0);
 
 # Remove nodes (including onces that don't exist)
-  test ("$CCS -f $t --removenode node1",0);
-  test ("$CCS -f $t --removenode node1",1);
-  test ("$CCS -f $t --removenode xxxx",1);
-  test ("$CCS -f $t --removenode node2",0);
-  test ("$CCS -f $t --removenode node3",0);
-  test ("$CCS -f $t --removenode node4",0);
-  test ("$CCS -f $t --removenode node5",0);
-  test ("$CCS -f $t --removenode node6",0);
-  test ("$CCS -f $t --removenode node7",0);
-  test ("$CCS -f $t --removenode node8",0);
-  test ("$CCS -f $t --removenode node9",0);
+  test ("$CCS -f $t --rmnode node1",0);
+  test ("$CCS -f $t --rmnode node1",1);
+  test ("$CCS -f $t --rmnode xxxx",1);
+  test ("$CCS -f $t --rmnode node2",0);
+  test ("$CCS -f $t --rmnode node3",0);
+  test ("$CCS -f $t --rmnode node4",0);
+  test ("$CCS -f $t --rmnode node5",0);
+  test ("$CCS -f $t --rmnode node6",0);
+  test ("$CCS -f $t --rmnode node7",0);
+  test ("$CCS -f $t --rmnode node8",0);
+  test ("$CCS -f $t --rmnode node9",0);
 
 # Re-add all the nodes again
   test ("$CCS -f $t --addnode node1",0);
diff --git a/ccs/unit_tests/version.conf b/ccs/unit_tests/version.conf
index 90cb1ad..6aa0fb5 100644
--- a/ccs/unit_tests/version.conf
+++ b/ccs/unit_tests/version.conf
@@ -1,5 +1,5 @@
 <cluster config_version="51" name="mycluster">
-  <fence_daemon post_fail_delay="0" post_join_delay="3"/>
+  <fence_daemon/>
   <clusternodes/>
   <cman/>
   <fencedevices/>
commit d168c797e07a5c8563a12af63af4ebe47e58a74a
Author:     Chris Feist <cfeist@redhat.com>
AuthorDate: Thu Jan 20 16:25:43 2011 -0600
Commit:     Chris Feist <cfeist@redhat.com>
CommitDate: Thu Jan 20 16:25:43 2011 -0600

    Added missing man page.

diff --git a/ccs/ccs.8 b/ricci/ccs/ccs.8
new file mode 100644
index 0000000..81b298d
--- /dev/null
+++ b/ccs/ccs.8
@@ -0,0 +1,194 @@
+.TH CCS 8
+.SH NAME
+ccs \- Cluster Configuration System
+.SH SYNOPSIS
+.B ccs [-h hostname | -f filename] [options]
+.SH DESCRIPTION
+.B ccs
+allows an administrator to create, modify and view a cluster configuration
+file on a remote node through ricci or on a local file system. Using
+.B ccs
+an administrator can also start and stop the cluster services on one or
+all of the nodes in a configured cluster.
+.SH OPTIONS
+Generally all command lines must specify either a hostname or filename to act
+upon.
+.SS "MAIN OPTIONS"
+.IP --help
+Display this help and exit
+.IP "-h, --host host"
+Cluster node to perform actions on
+.IP "-f, --file file"
+File to perform actions on
+.IP "-p, --password"
+Ricci user password for node running ricci
+.IP "--getconf"
+Print current cluster.conf file
+.IP "--setconf"
+Use the file specified by '-f' to send to the host
+specified with '-h'
+.IP "--checkconf"
+If file is specified, verify that all the nodes in the
+file have the same cluster.conf as the file.  If a
+host is specified then verify that all nodes in the
+host's cluster.conf file have the identical
+.IP "--sync"
+Sync config file to all nodes
+.IP "--activate"
+Activate config on node (use this option with --sync
+to activate config on all nodes)
+.IP "--debug"
+Display debugging information to help troubleshoot connection issues with ricci
+.SS "CLUSTER OPERATIONS"
+.IP "--createcluster cluster"
+Create a new cluster.conf (removing old one if it
+exists)
+.IP "--getversion"
+Get the current cluster.conf version
+.IP "--setversion <n>
+Set the cluster.conf version
+.IP "--incversion
+Increment the cluster.conf version by 1
+scp and put them in the current directory
+.IP "--startall
+Start cluster services on all nodes
+.IP "--stopall
+Stop cluster services on all nodes
+.IP "--start
+Start cluster services on host specified with -h
+.IP "--stop
+Stop cluster services on host specified with -h
+.SS "NODE OPERATIONS"
+.IP "--lsnodes
+List all nodes in the cluster
+.IP "--addnode <node>
+Add node <node> to the cluster
+.IP "--rmnode <node>
+Remove a node from the cluster
+.IP "--nodeid <nodeid>
+Specify nodeid when adding a node
+.IP "--votes <votes>
+Specify number of votes for a node
+.SS "FENCING OPERATIONS"
+.IP "--lsfencedev
+List all of the fence devices configured
+.IP "--lsfenceinst [<node>]
+List all of the fence methods and instances on the
+specified node or all nodes if no node is specified
+.IP "--addmethod <method> <node>
+Add a fence method to a specific node
+.IP "--rmmethod <method> <node>
+Remove a fence method from a specific node
+.IP "--addfencedev <device name> [fence device options]
+Add fence device
+.IP "--rmfencedev <fence device name>
+Remove fence device
+.IP "--addfenceinst <fence device name> <node> <method> <options>
+Add fence instance
+.IP "--rmfenceinst <fence device name> <node> <method>
+Remove all instances of the fence device listed from
+the given method and node
+.SS "FAILOVER DOMAIN OPERATIONS"
+.IP "--lsfailoverdomain
+Lists all of the failover domains and failover domain
+nodes configured in the cluster
+.IP "--addfailoverdomain <name> [restricted] [ordered] [nofailback]
+Add failover domain
+.IP "--rmfailoverdomain <name>
+Remove failover domain
+.IP "--addfailoverdomainnode <failover domain> <node> [priority=xx]
+Add node to given failover domain
+.IP "--rmfailoverdomainnode <failover domain> <node>
+Remove node from failover domain
+.SS "SERVICE OPERATIONS"
+.IP "--lsservices
+List currently configured services and resources in
+the cluster
+.IP "--addresource <resource type> [resource options] ...
+Add resources to the cluster
+.IP "--rmresource <resource type> [resource options]
+Remove specified resource with resource options
+.IP "--addservice <servicename> [service options] ...
+Add service to cluster
+.IP "--rmservice <servicename>
+Removes a service and all of its subservices
+.IP "--addsubservice <servicename> <subservice> [service options] ...
+Add individual sub services, if adding services within
+a tree, use ':' to separate elements and brackets to
+identify subservices of the same type
+Example: --addsubservice service_a nfs[1]:nfs[2]:nfs
+.IP "--rmsubservice <servicename> <subservice>
+Removes a specific subservice specified by the
+subservice, using ':' to separate elements and
+brackets to identify between subservices of the
+same type.
+.SS "QUORUM OPERATIONS"
+.IP "--lsquorum
+List quorum options and heuristics
+.IP "--setquorumd [quorumd options] ...
+Add quorumd options
+.IP "--addheuristic [heuristic options] ...
+Add heuristics to quorumd
+.IP "--rmheuristic [heuristic options] ...
+Remove heuristic specified by heurstic options
+.SS "MISC OPTIONS"
+.IP "--lsmisc
+List all of the misc options
+.IP "--settotem [totem options]
+Set totem options
+.IP "--setdlm [dlm options]
+Set dlm options
+.IP "--setrm [resource manager options]
+Set resource manager options
+.IP "--setcman [cman options]
+Set cman options
+.IP "--setmulticast [multicast address]
+Set's the multicast address to use (or removes it
+if no multicast address is given)
+.IP "--setfencedaemon [fence daemon options]
+Set fence daemon options
+.IP "--setlogging [logging options]
+Set logging options
+.IP "--addlogger [logger options]
+Add a logger
+.IP "--rmlogger [logger options]
+Remove a logger
+.SH FILES
+.I ~/.ccs/cacert.config ~/.ccs/cacert.pem ~/.ccs/privkey.pem
+.RS
+Automatically generated certificate files used to authenticate with ricci.
+.SH EXAMPLES
+.B Create and start a 3 node cluster with apc fencing:
+.br
+ccs -h host1 --createcluster mycluster
+.br
+ccs -h host1 --addnode host1
+.br
+ccs -h host1 --addnode host2
+.br
+ccs -h host1 --addnode host3
+.br
+ccs -h host1 --addmethod primary host1
+.br
+ccs -h host1 --addmethod primary host2
+.br
+ccs -h host1 --addmethod primary host3
+.br
+ccs -h host1 --addfencedev myfence ipaddr=192.168.0.200 login=apc password=apc
+.br
+ccs -h host1 --addfenceinst myfence host1 primary port=1
+.br
+ccs -h host1 --addfenceinst myfence host2 primary port=2
+.br
+ccs -h host1 --addfenceinst myfence host3 primary port=3
+.br
+ccs -h host1 --sync --activate
+.br
+ccs -h host1 --startall
+
+.SH AUTHOR
+Chris Feist <cfeist@redhat.com>
+.SH "SEE ALSO"
+.BR ricci (8),
+.BR cluster.conf (5),
+.BR ccs_tool (8)
