/*
** Copyright (C) Red Hat, Inc. 2005-2008
**
** This program is free software; you can redistribute it and/or modify it
** under the terms of the GNU General Public License version 2 as
** published by the Free Software Foundation.
**
** This program is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; see the file COPYING. If not, write to the
** Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
** MA 02139, USA.
*/

/*
 * Author: Stanko Kupcevic <kupcevic@redhat.com>
 */
/*
 * Note: this file originally auto-generated by mib2c using
 * : mib2c.access_functions.conf,v 1.6.2.2 2004/06/21 10:12:28 dts12 Exp $
 */

#ifndef __CONGA_MODCLUSTER_SNMP_SERVICESMIB_ACCESS_H
#define __CONGA_MODCLUSTER_SNMP_SERVICESMIB_ACCESS_H

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

extern "C" {
	/** User-defined data access functions for data in table rhcServicesTable */

	/** row level accessors */
	Netsnmp_First_Data_Point rhcServicesTable_get_first_data_point;
	Netsnmp_Next_Data_Point rhcServicesTable_get_next_data_point;
	Netsnmp_Free_Loop_Context rhcServicesTable_loop_free;
	Netsnmp_Make_Data_Context rhcServicesTable_context_convert_function;
	Netsnmp_Free_Data_Context rhcServicesTable_data_free;

	int rhcServicesTable_commit_row(void **my_data_context, int new_or_del);
	void *rhcServicesTable_create_data_context(netsnmp_variable_list *index_data);

	/** column accessors */
	char *get_rhcServiceName(void *data_context, size_t *ret_len);
	long *get_rhcServiceStatusCode(void *data_context, size_t *ret_len);
	char *get_rhcServiceStatusDesc(void *data_context, size_t *ret_len);
	char *get_rhcServiceStartMode(void *data_context, size_t *ret_len);
	char *get_rhcServiceRunningOnNode(void *data_context, size_t *ret_len);
};

#endif
